=== tests/cases/conformance/classes/members/privateNames/privateNameFieldMutateBinaryOp.ts ===
class Test {
>Test : Symbol(Test, Decl(privateNameFieldMutateBinaryOp.ts, 0, 0))

    #field: number;
>#field : Symbol(Test[#field], Decl(privateNameFieldMutateBinaryOp.ts, 0, 12))

    constructor() {
        this.#field += 1;
>this.#field : Symbol(Test[#field], Decl(privateNameFieldMutateBinaryOp.ts, 0, 12))
>this : Symbol(Test, Decl(privateNameFieldMutateBinaryOp.ts, 0, 0))

        this.#field -= 2;
>this.#field : Symbol(Test[#field], Decl(privateNameFieldMutateBinaryOp.ts, 0, 12))
>this : Symbol(Test, Decl(privateNameFieldMutateBinaryOp.ts, 0, 0))

        this.#field /= 3;
>this.#field : Symbol(Test[#field], Decl(privateNameFieldMutateBinaryOp.ts, 0, 12))
>this : Symbol(Test, Decl(privateNameFieldMutateBinaryOp.ts, 0, 0))

        this.#field *= 4;
>this.#field : Symbol(Test[#field], Decl(privateNameFieldMutateBinaryOp.ts, 0, 12))
>this : Symbol(Test, Decl(privateNameFieldMutateBinaryOp.ts, 0, 0))

        this.#field |= 5;
>this.#field : Symbol(Test[#field], Decl(privateNameFieldMutateBinaryOp.ts, 0, 12))
>this : Symbol(Test, Decl(privateNameFieldMutateBinaryOp.ts, 0, 0))

        this.#field **= 6;
>this.#field : Symbol(Test[#field], Decl(privateNameFieldMutateBinaryOp.ts, 0, 12))
>this : Symbol(Test, Decl(privateNameFieldMutateBinaryOp.ts, 0, 0))

        this.#field %= 7;
>this.#field : Symbol(Test[#field], Decl(privateNameFieldMutateBinaryOp.ts, 0, 12))
>this : Symbol(Test, Decl(privateNameFieldMutateBinaryOp.ts, 0, 0))

        this.#field <<= 8;
>this.#field : Symbol(Test[#field], Decl(privateNameFieldMutateBinaryOp.ts, 0, 12))
>this : Symbol(Test, Decl(privateNameFieldMutateBinaryOp.ts, 0, 0))

        this.#field >>= 9;
>this.#field : Symbol(Test[#field], Decl(privateNameFieldMutateBinaryOp.ts, 0, 12))
>this : Symbol(Test, Decl(privateNameFieldMutateBinaryOp.ts, 0, 0))

        this.#field >>>= 10;
>this.#field : Symbol(Test[#field], Decl(privateNameFieldMutateBinaryOp.ts, 0, 12))
>this : Symbol(Test, Decl(privateNameFieldMutateBinaryOp.ts, 0, 0))

        this.#field &= 11;
>this.#field : Symbol(Test[#field], Decl(privateNameFieldMutateBinaryOp.ts, 0, 12))
>this : Symbol(Test, Decl(privateNameFieldMutateBinaryOp.ts, 0, 0))

        this.#field ^= 12;
>this.#field : Symbol(Test[#field], Decl(privateNameFieldMutateBinaryOp.ts, 0, 12))
>this : Symbol(Test, Decl(privateNameFieldMutateBinaryOp.ts, 0, 0))
    }
}

