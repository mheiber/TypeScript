=== tests/cases/conformance/classes/members/privateNames/privateNameFieldUnaryMutation.ts ===
class C {
>C : C

    #test: number = 24;
>#test : number
>24 : 24

    static #staticTest: number = 24;
>#staticTest : number
>24 : 24

    constructor() {
        this.#test++;
>this.#test++ : number
>this.#test : number
>this : this

        this.#test--;
>this.#test-- : number
>this.#test : number
>this : this

        ++this.#test;
>++this.#test : number
>this.#test : number
>this : this

        --this.#test;
>--this.#test : number
>this.#test : number
>this : this

        C.#staticTest++;
>C.#staticTest++ : number
>C.#staticTest : number
>C : typeof C

        C.#staticTest--;
>C.#staticTest-- : number
>C.#staticTest : number
>C : typeof C

        ++C.#staticTest;
>++C.#staticTest : number
>C.#staticTest : number
>C : typeof C

        --C.#staticTest;
>--C.#staticTest : number
>C.#staticTest : number
>C : typeof C
    }
    test() {
>test : () => void

        this.getInstance().#test++;
>this.getInstance().#test++ : number
>this.getInstance().#test : number
>this.getInstance() : C
>this.getInstance : () => C
>this : this
>getInstance : () => C

        this.getInstance().#test--;
>this.getInstance().#test-- : number
>this.getInstance().#test : number
>this.getInstance() : C
>this.getInstance : () => C
>this : this
>getInstance : () => C

        ++this.getInstance().#test;
>++this.getInstance().#test : number
>this.getInstance().#test : number
>this.getInstance() : C
>this.getInstance : () => C
>this : this
>getInstance : () => C

        --this.getInstance().#test;
>--this.getInstance().#test : number
>this.getInstance().#test : number
>this.getInstance() : C
>this.getInstance : () => C
>this : this
>getInstance : () => C

        this.getClass().#staticTest++;
>this.getClass().#staticTest++ : number
>this.getClass().#staticTest : number
>this.getClass() : typeof C
>this.getClass : () => typeof C
>this : this
>getClass : () => typeof C

        this.getClass().#staticTest--;
>this.getClass().#staticTest-- : number
>this.getClass().#staticTest : number
>this.getClass() : typeof C
>this.getClass : () => typeof C
>this : this
>getClass : () => typeof C

        ++this.getClass().#staticTest;
>++this.getClass().#staticTest : number
>this.getClass().#staticTest : number
>this.getClass() : typeof C
>this.getClass : () => typeof C
>this : this
>getClass : () => typeof C

        --this.getClass().#staticTest;
>--this.getClass().#staticTest : number
>this.getClass().#staticTest : number
>this.getClass() : typeof C
>this.getClass : () => typeof C
>this : this
>getClass : () => typeof C
    }
    getInstance() { return new C(); }
>getInstance : () => C
>new C() : C
>C : typeof C

    getClass() { return C; }
>getClass : () => typeof C
>C : typeof C
}

