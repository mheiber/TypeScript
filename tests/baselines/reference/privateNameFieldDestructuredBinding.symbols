=== tests/cases/conformance/classes/members/privateNames/privateNameFieldDestructuredBinding.ts ===
class A {
>A : Symbol(A, Decl(privateNameFieldDestructuredBinding.ts, 0, 0))

    #field = 1;
>#field : Symbol(A.#field, Decl(privateNameFieldDestructuredBinding.ts, 0, 9))

    static #staticField = 1;
>#staticField : Symbol(A.#staticField, Decl(privateNameFieldDestructuredBinding.ts, 1, 15))

    testObject() {
>testObject : Symbol(A.testObject, Decl(privateNameFieldDestructuredBinding.ts, 2, 28))

        return { x: 10, y: 6 };
>x : Symbol(x, Decl(privateNameFieldDestructuredBinding.ts, 4, 16))
>y : Symbol(y, Decl(privateNameFieldDestructuredBinding.ts, 4, 23))
    }
    testArray() {
>testArray : Symbol(A.testArray, Decl(privateNameFieldDestructuredBinding.ts, 5, 5))

        return [10, 11];
    }
    constructor() {
        let y: number;
>y : Symbol(y, Decl(privateNameFieldDestructuredBinding.ts, 10, 11))

        ({ x: this.#field, y } = this.testObject());
>x : Symbol(x, Decl(privateNameFieldDestructuredBinding.ts, 11, 10))
>this.#field : Symbol(A.#field, Decl(privateNameFieldDestructuredBinding.ts, 0, 9))
>this : Symbol(A, Decl(privateNameFieldDestructuredBinding.ts, 0, 0))
>y : Symbol(y, Decl(privateNameFieldDestructuredBinding.ts, 11, 26))
>this.testObject : Symbol(A.testObject, Decl(privateNameFieldDestructuredBinding.ts, 2, 28))
>this : Symbol(A, Decl(privateNameFieldDestructuredBinding.ts, 0, 0))
>testObject : Symbol(A.testObject, Decl(privateNameFieldDestructuredBinding.ts, 2, 28))

        ([this.#field, y] = this.testArray());
>this.#field : Symbol(A.#field, Decl(privateNameFieldDestructuredBinding.ts, 0, 9))
>this : Symbol(A, Decl(privateNameFieldDestructuredBinding.ts, 0, 0))
>y : Symbol(y, Decl(privateNameFieldDestructuredBinding.ts, 10, 11))
>this.testArray : Symbol(A.testArray, Decl(privateNameFieldDestructuredBinding.ts, 5, 5))
>this : Symbol(A, Decl(privateNameFieldDestructuredBinding.ts, 0, 0))
>testArray : Symbol(A.testArray, Decl(privateNameFieldDestructuredBinding.ts, 5, 5))

        ({ x: A.#staticField, y } = this.testObject());
>x : Symbol(x, Decl(privateNameFieldDestructuredBinding.ts, 13, 10))
>A.#staticField : Symbol(A.#staticField, Decl(privateNameFieldDestructuredBinding.ts, 1, 15))
>A : Symbol(A, Decl(privateNameFieldDestructuredBinding.ts, 0, 0))
>y : Symbol(y, Decl(privateNameFieldDestructuredBinding.ts, 13, 29))
>this.testObject : Symbol(A.testObject, Decl(privateNameFieldDestructuredBinding.ts, 2, 28))
>this : Symbol(A, Decl(privateNameFieldDestructuredBinding.ts, 0, 0))
>testObject : Symbol(A.testObject, Decl(privateNameFieldDestructuredBinding.ts, 2, 28))

        ([A.#staticField, y] = this.testArray());
>A.#staticField : Symbol(A.#staticField, Decl(privateNameFieldDestructuredBinding.ts, 1, 15))
>A : Symbol(A, Decl(privateNameFieldDestructuredBinding.ts, 0, 0))
>y : Symbol(y, Decl(privateNameFieldDestructuredBinding.ts, 10, 11))
>this.testArray : Symbol(A.testArray, Decl(privateNameFieldDestructuredBinding.ts, 5, 5))
>this : Symbol(A, Decl(privateNameFieldDestructuredBinding.ts, 0, 0))
>testArray : Symbol(A.testArray, Decl(privateNameFieldDestructuredBinding.ts, 5, 5))
    }
}

